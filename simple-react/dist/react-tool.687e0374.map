{"version":3,"sources":["node_modules\\gooact\\gooact.js","index.js"],"names":["document","body"],"mappingsoBAAO;AAAA;AAAA;AAAA;AAAA,CAAP,EAAgCA,SAASC,IAAzC","file":"react-tool.687e0374.map","sourceRoot":"..","sourcesContent":["/* Gooact by SweetPalma, 2018. All rights reserved. */\n(exports => { 'use strict';\n\nconst createElement = exports.createElement = (type, props, ...children) => {\n    props = props != null ? props : {};\n    return {type, props, children};\n};\n\nconst setAttribute = exports.setAttribute = (dom, key, value) => {\n    if (typeof value == 'function' && key.startsWith('on')) {\n        const eventType = key.slice(2).toLowerCase();\n        dom.__gooactHandlers = dom.__gooactHandlers || {};\n        dom.removeEventListener(eventType, dom.__gooactHandlers[eventType]);\n        dom.__gooactHandlers[eventType] = value;\n        dom.addEventListener(eventType, dom.__gooactHandlers[eventType]);\n    } else if (key == 'checked' || key == 'value' || key == 'id') {\n        dom[key] = value;\n    } else if (key == 'key') {\n        dom.__gooactKey = value;\n    } else if (typeof value != 'object' && typeof value != 'function') {\n        dom.setAttribute(key, value);\n    }\n};\n\nconst render = exports.render = (vdom, parent=null) => {\n    if (parent) parent.textContent = '';\n    const mount = parent ? (el => parent.appendChild(el)) : (el => el);\n    if (typeof vdom == 'string' || typeof vdom == 'number') {\n        return mount(document.createTextNode(vdom));\n    } else if (typeof vdom == 'boolean' || vdom === null) {\n        return mount(document.createTextNode(''));\n    } else if (typeof vdom == 'object' && typeof vdom.type == 'function') {\n        return mount(Component.render(vdom));\n    } else if (typeof vdom == 'object' && typeof vdom.type == 'string') {\n        const dom = document.createElement(vdom.type);\n        for (const child of [/* flatten */].concat(...vdom.children))\n            dom.appendChild(render(child));\n        for (const prop in vdom.props)\n            setAttribute(dom, prop, vdom.props[prop]);\n        return mount(dom);\n    } else {\n        throw new Error(`Invalid VDOM: ${vdom}.`);\n    }\n};\n\nconst patch = exports.patch = (dom, vdom, parent=dom.parentNode) => {\n    const replace = parent ? el => (parent.replaceChild(el, dom) && el) : (el => el);\n    if (typeof vdom == 'object' && typeof vdom.type == 'function') {\n        return Component.patch(dom, vdom, parent);\n    } else if (typeof vdom != 'object' && dom instanceof Text) {\n        return dom.textContent != vdom ? replace(render(vdom)) : dom;\n    } else if (typeof vdom == 'object' && dom instanceof Text) {\n        return replace(render(vdom));\n    } else if (typeof vdom == 'object' && dom.nodeName != vdom.type.toUpperCase()) {\n        return replace(render(vdom));\n    } else if (typeof vdom == 'object' && dom.nodeName == vdom.type.toUpperCase()) {\n        const pool = {};\n        const active = document.activeElement;\n        for (const index in Array.from(dom.childNodes)) {\n            const child = dom.childNodes[index];\n            const key = child.__gooactKey || index;\n            pool[key] = child;\n        }\n        const vchildren = [/* flatten */].concat(...vdom.children);\n        for (const index in vchildren) {\n            const child = vchildren[index];\n            const key = child.props && child.props.key || index;\n            dom.appendChild(pool[key] ? patch(pool[key], child) : render(child));\n            delete pool[key];\n        }\n        for (const key in pool) {\n            if (pool[key].__gooactInstance)\n                pool[key].__gooactInstance.componentWillUnmount();\n            pool[key].remove();\n        }\n        for (const attr of dom.attributes) dom.removeAttribute(attr.name);\n        for (const prop in vdom.props) setAttribute(dom, prop, vdom.props[prop]);\n        active.focus();\n        return dom;\n    }\n};\n\nconst Component = exports.Component = class Component {\n    constructor(props) {\n        this.props = props || {};\n        this.state = null;\n    }\n\n    static render(vdom, parent=null) {\n        const props = Object.assign({}, vdom.props, {children: vdom.children});\n        if (Component.isPrototypeOf(vdom.type)) {\n            const instance = new (vdom.type)(props);\n            instance.componentWillMount();\n            instance.base = render(instance.render(), parent);\n            instance.base.__gooactInstance = instance;\n            instance.base.__gooactKey = vdom.props.key;\n            instance.componentDidMount();\n            return instance.base;\n        } else {\n            return render(vdom.type(props), parent);\n        }\n    }\n\n    static patch(dom, vdom, parent=dom.parentNode) {\n        const props = Object.assign({}, vdom.props, {children: vdom.children});\n        if (dom.__gooactInstance && dom.__gooactInstance.constructor == vdom.type) {\n            dom.__gooactInstance.componentWillReceiveProps(props);\n            dom.__gooactInstance.props = props;\n            return patch(dom, dom.__gooactInstance.render());\n        } else if (Component.isPrototypeOf(vdom.type)) {\n            const ndom = Component.render(vdom);\n            return parent ? (parent.replaceChild(ndom, dom) && ndom) : (ndom);\n        } else if (!Component.isPrototypeOf(vdom.type)) {\n            return patch(dom, vdom.type(props));\n        }\n    }\n\n    setState(nextState) {\n        if (this.base && this.shouldComponentUpdate(this.props, nextState)) {\n            const prevState = this.state;\n            this.componentWillUpdate(this.props, nextState);\n            this.state = nextState;\n            patch(this.base, this.render());\n            this.componentDidUpdate(this.props, prevState);\n        } else {\n            this.state = nextState;\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps != this.props || nextState != this.state;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        return undefined;\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        return undefined;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        return undefined;\n    }\n\n    componentWillMount() {\n        return undefined;\n    }\n\n    componentDidMount() {\n        return undefined;\n    }\n\n    componentWillUnmount() {\n        return undefined;\n    }\n};\n\n})(typeof exports != 'undefined' ? exports : window.Gooact = {});\n","import Gooact, {render, Component} from 'gooact';\r\nrender(<div>Hello World!</div>, document.body);"]}